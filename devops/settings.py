"""
Django settings for db project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import re

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/8'
# CELERY_TIMEZONE='Asia/Shanghai'  #并没有北京时区，与下面TIME_ZONE应该一致
# BROKER_URL='redis://192.168.8.152:6379/8'  #任何可用的redis都可以，不一定要在django server运行的主机上
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'  ###


LOGGING_DIR = "logs"
if not os.path.exists(LOGGING_DIR):
    os.mkdir(LOGGING_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {  #格式化器
        'standard': {
            'format': '[%(levelname)s][%(asctime)s][%(lineno)d] : %(message)s'
        },
        'simple': {
            'format': '[%(levelname)s]> %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file_handler': {
             'level': 'INFO',
             'class': 'logging.handlers.TimedRotatingFileHandler',
             'filename': '%s/django.log' % LOGGING_DIR,  #具体日志文件的名字
             'formatter':'standard'
        }, # 用于文件输出
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter':'standard'
        },
    },
    'loggers': {   #日志分配到哪个handlers中
        'mydjango': {
            'handlers': ['console','file_handler'],
            'level':'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django':{
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sej*$dvs_nb_4f5vr)8(on0meif4zg(#5swad6&6!w&9_mrfs6'
AES_KEY = ')_9-+klo@c4t$k$w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account',
    # 'inst',
    # 'devops',
    'corsheaders',# pip install django-cors-headers 这个是为了防止跨域，具体请另查资料，我这里就不赘述了。
    'rest_framework', # pip install djangorestframework 方便我们写后端接口
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',# 这个的导入不能太靠后，因为中间件也有先后顺序的加载
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'libs.middleware.AuthenticationMiddleware',
    'libs.middleware.HandleExceptionMiddleware',
]

ROOT_URLCONF = 'devops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'dbweb/dist',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'devops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认
        'NAME': 'devops',  # 连接的数据库
        'HOST': '192.168.8.152',  # mysql的ip地址
        'PORT': 3306, # mysql的端口
        'USER': 'devops',  # mysql的用户名
        'PASSWORD': 'devops'  # mysql的密码
    }
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
USE_TZ = False
TIME_ZONE = 'Asia/Shanghai'
# USE_TZ = True
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

SECRET_KEY = 'aaa'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_CREDENTIALS = True # 允许携带cookie
# CORS_ORIGIN_WHITELIST = ( # 设置白名单
#     'http://127.0.0.1:8080',
#     'http://localhost:8080',
#     'http://192.168.8.156:8080',
# )

CORS_ALLOW_METHODS = ( # 设置请求方法
    'DELETE',
    'GET',
    'POST',
    'OPTIONS',
    'PATCH',
    'PUT',
    'VIEW',
)

CORS_ALLOW_HEADERS = ( # 设置请求头的内容
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-request-with',
    'Pragma',
    'X-Token',
)

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"dbweb/dist/static") # 这个是我们收集静态文件的路径
]

APPEND_SLASH=False


CORS_ORIGIN_ALLOW_ALL=True
CORS_ORIGIN_WHITELIST = ("http://*",)